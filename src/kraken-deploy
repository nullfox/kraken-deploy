#!/usr/bin/env node

import Util from 'util';
import Path from 'path';
import FS from 'fs';
import YAML from 'yamljs';
import Handlebars from 'handlebars';
import ShellJS from 'shelljs';

const createProject = (project) => {
  const existing = ShellJS.exec('qq project list | grep %s', project);

  if (existing.code === 0) {
    return ShellJS.exec(Util.format(
      'qq project create %s --label "%s"',
      project,
      'A kraken generated project!'
    )).code;
  }

  return 0;
};

const buildAndPush = (directory, project, image) => {
  ShellJS.cd(directory);

  const commands = [
    'npm run build',
    Util.format('docker build --build-arg NPM_TOKEN=$(cat ~/.npmrc) -t %s/%s .', project, image),
    Util.format('qq image push %s/%s --tags latest', project, image)
  ];

  let result = { code: 0 };

  commands.forEach((command) => {
    if (result.code === 0) {
      console.log('Running command: ', command);
      result = ShellJS.exec(command);
    }
  });

  return result;
};

// Directories!
const rootDir = ShellJS.pwd().toString();
const deployDir = Path.join(rootDir, 'deploy');
const apiDir = Path.join(deployDir, 'kraken-api');
const quakeDir = Path.join(rootDir, '.quake');

// Create the swagger file
console.log('Swaggerizing backend');
ShellJS.exec('npm run swaggerize');

// Create the dir if it doesn't exist
try {
  FS.statSync(deployDir);
} catch (e) {
  ShellJS.mkdir(deployDir);
}

// Update if the repo already exists, otherwise clone it
console.log('Cloning/updating kraken-api');
try {
  FS.statSync(apiDir);
  ShellJS.cd(apiDir);
  ShellJS.exec('git pull');
} catch (e) {
  ShellJS.cd(deployDir);
  ShellJS.exec('git clone https://github.com/nullfox/kraken-api.git');
  ShellJS.cd(apiDir);
}

ShellJS.cd(apiDir);

console.log('Installing API NPM modules');
ShellJS.exec('npm --loglevel=silent install');

ShellJS.cd(rootDir);

console.log('Installing Backend NPM modules');
ShellJS.exec('npm --loglevel=silent install');

// Copy the kraken file to the local root for Docker purposes
ShellJS.cp(Path.join(rootDir, 'swagger.yaml'), Path.join(apiDir, 'swagger.yaml'));

const kraken = YAML.load(Path.join(rootDir, '.kraken'));
const project = kraken.quadra.project;

console.log('Writing Quake file');
const source = FS.readFileSync(Path.join(__dirname, '../templates/cluster.toml.hbs'));
const template = Handlebars.compile(source.toString());

// Create the dir if it doesn't exist
try {
  FS.statSync(quakeDir);
} catch (e) {
  ShellJS.mkdir(quakeDir);
}

FS.writeFileSync(Path.join(quakeDir, 'cluster.toml'), template(kraken.quadra));

console.log('Checking for existing project/creating project');
if (createProject(project) !== 0) {
  throw new Error(Util.format('Could not create project "%s"', project));
}

console.log('Starting API imaging');
let build = buildAndPush(apiDir, project, 'api');
if (build.code !== 0) {
  throw new Error(Util.format('Could not build or push image "%s/%s": %s', project, 'api', build.toString()));
}

console.log('Starting Backend imaging');
build = buildAndPush(rootDir, project, 'backend');
if (build.code !== 0) {
  throw new Error(Util.format('Could not build or push image "%s/%s": %s', project, 'backend', build.toString()));
}

ShellJS.cd(rootDir);

console.log('Creating/updating quadra cluster');
ShellJS.exec('quake cluster update');
